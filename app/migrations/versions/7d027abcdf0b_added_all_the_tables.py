"""added all the tables

Revision ID: 7d027abcdf0b
Revises: c12022845095
Create Date: 2025-08-18 14:20:34.908127

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '7d027abcdf0b'
down_revision: Union[str, Sequence[str], None] = 'c12022845095'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('drivers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=100), nullable=True),
    sa.Column('is_handicap', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('phone')
    )
    op.create_index(op.f('ix_drivers_id'), 'drivers', ['id'], unique=False)
    op.create_table('parking_lots',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('total_capacity', sa.Integer(), nullable=False),
    sa.Column('available_slots', sa.Integer(), nullable=False),
    sa.Column('is_full', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('owner_name', sa.String(length=100), server_default='Sanjay', nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['owners.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_parking_lots_id'), 'parking_lots', ['id'], unique=False)
    op.create_table('vehicles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('plate_number', sa.String(length=20), nullable=False),
    sa.Column('make', sa.String(length=50), nullable=False),
    sa.Column('model', sa.String(length=50), nullable=True),
    sa.Column('color', sa.String(length=30), nullable=False),
    sa.Column('vehicle_type', sa.String(length=20), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['drivers.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('plate_number')
    )
    op.create_index(op.f('ix_vehicles_id'), 'vehicles', ['id'], unique=False)
    op.create_table('lot_notifications',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('lot_id', sa.Integer(), nullable=False),
    sa.Column('notification_type', sa.String(length=30), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('is_sent', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('recipient_type', sa.String(length=20), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['lot_id'], ['parking_lots.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_lot_notifications_id'), 'lot_notifications', ['id'], unique=False)
    op.create_table('parking_slots',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('slot_number', sa.String(length=10), nullable=False),
    sa.Column('lot_id', sa.Integer(), nullable=False),
    sa.Column('row_identifier', sa.String(length=5), nullable=False),
    sa.Column('is_occupied', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('is_handicap_accessible', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('distance_from_exit', sa.Integer(), nullable=True),
    sa.Column('slot_size', sa.String(length=20), server_default='standard', nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['lot_id'], ['parking_lots.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_parking_slots_id'), 'parking_slots', ['id'], unique=False)
    op.create_table('parking_tickets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ticket_number', sa.String(length=20), nullable=False),
    sa.Column('vehicle_id', sa.Integer(), nullable=False),
    sa.Column('driver_id', sa.Integer(), nullable=False),
    sa.Column('lot_id', sa.Integer(), nullable=False),
    sa.Column('slot_id', sa.Integer(), nullable=False),
    sa.Column('attendant_id', sa.Integer(), nullable=True),
    sa.Column('entry_time', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('exit_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('parking_fee', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('payment_status', sa.String(length=20), server_default='pending', nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default='true', nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['attendant_id'], ['attendants.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['lot_id'], ['parking_lots.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['slot_id'], ['parking_slots.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('ticket_number')
    )
    op.create_index(op.f('ix_parking_tickets_id'), 'parking_tickets', ['id'], unique=False)
    op.alter_column('attendants', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.drop_constraint(op.f('attendants_email_key'), 'attendants', type_='unique')
    op.create_index(op.f('ix_attendants_email'), 'attendants', ['email'], unique=True)
    op.alter_column('owners', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.drop_constraint(op.f('owners_email_key'), 'owners', type_='unique')
    op.create_index(op.f('ix_owners_email'), 'owners', ['email'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_owners_email'), table_name='owners')
    op.create_unique_constraint(op.f('owners_email_key'), 'owners', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('owners', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.drop_index(op.f('ix_attendants_email'), table_name='attendants')
    op.create_unique_constraint(op.f('attendants_email_key'), 'attendants', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('attendants', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.drop_index(op.f('ix_parking_tickets_id'), table_name='parking_tickets')
    op.drop_table('parking_tickets')
    op.drop_index(op.f('ix_parking_slots_id'), table_name='parking_slots')
    op.drop_table('parking_slots')
    op.drop_index(op.f('ix_lot_notifications_id'), table_name='lot_notifications')
    op.drop_table('lot_notifications')
    op.drop_index(op.f('ix_vehicles_id'), table_name='vehicles')
    op.drop_table('vehicles')
    op.drop_index(op.f('ix_parking_lots_id'), table_name='parking_lots')
    op.drop_table('parking_lots')
    op.drop_index(op.f('ix_drivers_id'), table_name='drivers')
    op.drop_table('drivers')
    # ### end Alembic commands ###
